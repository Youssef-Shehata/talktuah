// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chats.sql

package database

import (
	"context"
	"time"
)

const deleteChat = `-- name: DeleteChat :exec
;


DELETE from  Chats where id = ?
`

func (q *Queries) DeleteChat(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChat, id)
	return err
}

const getChatCreationDate = `-- name: GetChatCreationDate :one
select creation_date from Chats where id = ?
`

func (q *Queries) GetChatCreationDate(ctx context.Context, id int64) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getChatCreationDate, id)
	var creation_date time.Time
	err := row.Scan(&creation_date)
	return creation_date, err
}

const getChats = `-- name: GetChats :many
select id, creation_date from Chats
`

func (q *Queries) GetChats(ctx context.Context) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(&i.ID, &i.CreationDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newChat = `-- name: NewChat :one
INSERT INTO Chats(creation_date)
VALUES (
    NOW()
)
RETURNING id, creation_date
`

func (q *Queries) NewChat(ctx context.Context) (Chat, error) {
	row := q.db.QueryRowContext(ctx, newChat)
	var i Chat
	err := row.Scan(&i.ID, &i.CreationDate)
	return i, err
}
