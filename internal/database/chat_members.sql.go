// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat_members.sql

package database

import (
	"context"
)

const getChatMembers = `-- name: GetChatMembers :many
select chat_id, user_id, join_date from ChatMembers where chat_id = ? order by join_date desc
`

func (q *Queries) GetChatMembers(ctx context.Context, chatID interface{}) ([]ChatMember, error) {
	rows, err := q.db.QueryContext(ctx, getChatMembers, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMember
	for rows.Next() {
		var i ChatMember
		if err := rows.Scan(&i.ChatID, &i.UserID, &i.JoinDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newMember = `-- name: NewMember :one
INSERT INTO ChatMembers (chat_id, user_id ,join_date)

VALUES (
    ?,
    ?,
    NOW()
)
RETURNING chat_id, user_id, join_date
`

type NewMemberParams struct {
	ChatID interface{}
	UserID interface{}
}

func (q *Queries) NewMember(ctx context.Context, arg NewMemberParams) (ChatMember, error) {
	row := q.db.QueryRowContext(ctx, newMember, arg.ChatID, arg.UserID)
	var i ChatMember
	err := row.Scan(&i.ChatID, &i.UserID, &i.JoinDate)
	return i, err
}
